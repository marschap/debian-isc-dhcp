#!/bin/sh

# dhclient-script for GNU, based on the script for Linux.
# Dan Halbert, March, 1997.
# Updated for Linux 2.[12] by Brian J. Murrell, January 1999.
# Modified for Debian.  Matt Zimmerman and Eloy Paris, December 2003
# Modified to remove useless tests for antiquated kernel versions that
# this doesn't even work with anyway, and introduces a dependency on /usr
# being mounted, which causes cosmetic errors on hosts that NFS mount /usr
# Andrew Pollock, February 2005
# Modified to work on point-to-point links. Andrew Pollock, June 2005
# Modified to support passing the parameters called with to the hooks. Andrew Pollock, November 2005
# Modified to work under GNU/Hurd for isc-dhcp-4.1.1 based on the
# patch by Samuel Thibault for dhcp. Svante Signell, February 2011.

# The alias handling in here probably still sucks. -mdz

# update /etc/resolv.conf based on received values
make_resolv_conf() {
    local new_resolv_conf

    # DHCPv4
    if [ -n "$new_domain_search" ] || [ -n "$new_domain_name" ] ||
       [ -n "$new_domain_name_servers" ]; then
        new_resolv_conf=/etc/resolv.conf.dhclient-new
        rm -f $new_resolv_conf

        if [ -n "$new_domain_name" ]; then
            echo domain ${new_domain_name%% *} >>$new_resolv_conf
        fi

        if [ -n "$new_domain_search" ]; then
            if [ -n "$new_domain_name" ]; then
                domain_in_search_list=""
                for domain in $new_domain_search; do
                    if [ "$domain" = "${new_domain_name}" ] ||
                       [ "$domain" = "${new_domain_name}." ]; then
                        domain_in_search_list="Yes"
                    fi
                done
                if [ -z "$domain_in_search_list" ]; then
                            new_domain_search="$new_domain_name $new_domain_search"
                fi
            fi
            echo "search ${new_domain_search}" >> $new_resolv_conf
        elif [ -n "$new_domain_name" ]; then
                echo "search ${new_domain_name}" >> $new_resolv_conf
        fi

        if [ -n "$new_domain_name_servers" ]; then
                   for nameserver in $new_domain_name_servers; do
                       echo nameserver $nameserver >>$new_resolv_conf
            done
        else # keep 'old' nameservers
            sed -n /^\w*[Nn][Aa][Mm][Ee][Ss][Ee][Rr][Vv][Ee][Rr]/p /etc/resolv.conf >>$new_resolv_conf
        fi

        chown --reference=/etc/resolv.conf $new_resolv_conf
        chmod --reference=/etc/resolv.conf $new_resolv_conf
        mv -f $new_resolv_conf /etc/resolv.conf
    # DHCPv6
    elif [ -n "$new_dhcp6_domain_search" ] || [ -n "$new_dhcp6_name_servers" ]; then
        new_resolv_conf=/etc/resolv.conf.dhclient-new
        rm -f $new_resolv_conf

        if [ -n "$new_dhcp6_domain_search" ]; then
            echo "search ${new_dhcp6_domain_search}" >> $new_resolv_conf
        fi

        if [ -n "$new_dhcp6_name_servers" ]; then
            for nameserver in $new_dhcp6_name_servers; do
                echo nameserver $nameserver >>$new_resolv_conf
            done
        else # keep 'old' nameservers
            sed -n /^\w*[Nn][Aa][Mm][Ee][Ss][Ee][Rr][Vv][Ee][Rr]/p /etc/resolv.conf >>$new_resolv_conf
        fi

        chown --reference=/etc/resolv.conf $new_resolv_conf
        chmod --reference=/etc/resolv.conf $new_resolv_conf
        mv -f $new_resolv_conf /etc/resolv.conf
    fi
}

# run given script
run_hook() {
    local script
    local exit_status
    script="$1"
    shift        # discard the first argument, then the rest are the script's

    if [ -f $script ]; then
        . $script "$@"
    fi

    if [ -n "$exit_status" ] && [ "$exit_status" -ne 0 ]; then
        logger -p daemon.err "$script returned non-zero exit status $exit_status"
    fi

    return $exit_status
}

# run scripts in given directory
run_hookdir() {
    local dir
    local exit_status
    dir="$1"
    shift        # See run_hook

    if [ -d "$dir" ]; then
        for script in $(run-parts --list $dir); do
            run_hook $script "$@" || true
            exit_status=$?
        done
    fi

    return $exit_status
}

# Must be used on exit.   Invokes the local dhcp client exit hooks, if any.
exit_with_hooks() {
    exit_status=$1

    # Source the documented exit-hook script, if it exists
    if ! run_hook /etc/dhcp/dhclient-exit-hooks "$@"; then
        exit_status=$?
    fi

    # Now run scripts in the Debian-specific directory.
    if ! run_hookdir /etc/dhcp/dhclient-exit-hooks.d "$@"; then
        exit_status=$?
    fi

    exit $exit_status
}


# set up some variables for DHCPv4 handlers below
if [ -n "$new_broadcast_address" ]; then
    new_broadcast_arg="--broadcast $new_broadcast_address"
fi
if [ -n "$old_broadcast_address" ]; then
    old_broadcast_arg="--broadcast $old_broadcast_address"
fi
if [ -n "$new_subnet_mask" ]; then
    new_subnet_arg="--netmask $new_subnet_mask"
fi
if [ -n "$alias_subnet_mask" ]; then
    alias_subnet_arg="--netmask $alias_subnet_mask"
fi
# The 576 MTU is only used for X.25 and dialup connections
# where the admin wants low latency.  Such a low MTU can cause
# problems with UDP traffic, among other things.  As such,
# disallow MTUs from 576 and below by default, so that broken
# MTUs are ignored, but higher stuff is allowed (1492, 1500, etc).
if [ -z "$new_interface_mtu" ] || [ "$new_interface_mtu" -lt 576 ]; then
    new_interface_mtu=''
fi
if [ -n "$IF_METRIC" ]; then
    metric_arg="--metric $IF_METRIC"        # interfaces(5), "metric" option
fi


# The action starts here

# Invoke the local dhcp client enter hooks, if they exist.
run_hook /etc/dhcp/dhclient-enter-hooks
run_hookdir /etc/dhcp/dhclient-enter-hooks.d

# Execute the operation
case "$reason" in

    ### DHCPv4 Handlers

    MEDIUM|ARPCHECK|ARPSEND)
        # Do nothing
        ;;
    PREINIT)
        # The DHCP client is requesting that an interface be
        # configured as required in order to send packets prior to
        # receiving an actual address. - dhclient-script(8)

        # ensure interface is up
        # TODO: handle multiple interface case.
        fsysopts /servers/socket/2 -i ${interface} -a 0.0.0.0 -m 255.0.0.0

        if [ -n "$alias_ip_address" ]; then
            # flush alias IP from interface
            # TODO
            :
            # ip -4 addr flush dev ${interface} label ${interface}:0
        fi

        ;;

    BOUND|RENEW|REBIND|REBOOT)
        if [ -n "$old_host_name" ] && [ -n "$new_host_name" ] &&
           [ "$old_host_name" != "$new_host_name" ]; then
            # hostname changed => set it
            hostname "$new_host_name"
        fi

        if [ -n "$old_ip_address" ] && [ -n "$alias_ip_address" ] &&
           [ "$alias_ip_address" != "$old_ip_address" ]; then
            # alias IP may have changed => flush it
	    # TODO
            :
            # ip -4 addr flush dev ${interface} label ${interface}:0
        fi

        if [ -n "$old_ip_address" ] &&
           [ "$old_ip_address" != "$new_ip_address" ]; then
            # leased IP has changed => flush it
            inetutils-ifconfig -i ${interface} -A 0.0.0.0
        fi

        if [ -z "$old_ip_address" ] ||
           [ "$old_ip_address" != "$new_ip_address" ] ||
           [ "$reason" = "BOUND" ] || [ "$reason" = "REBOOT" ]; then
            # new IP has been leased or leased IP changed => set it
            inetutils-ifconfig -i ${interface} -A ${new_ip_address} \
	        ${new_subnet_arg} ${new_broadcast_arg}

            if [ -n "$new_interface_mtu" ]; then
                # set MTU
                inetutils-ifconfig -i ${interface} --mtu ${new_interface_mtu}
            fi

            for router in $new_routers; do
                if [ "$new_subnet_mask" = "255.255.255.255" ]; then
                    # point-to-point connection => set explicit route
                    # TODO
		    :
                    #ip -4 route add ${router} dev $interface >/dev/null 2>&1
                fi

                # set default route
                fsysopts /servers/socket/2 $(fsysopts /servers/socket/2) -g ${router}
            done
        fi

        if [ -n "$alias_ip_address" ] &&
           [ "$new_ip_address" != "$alias_ip_address" ]; then
            # separate alias IP given, which may have changed
            # => flush it, set it & add host route to it
	    # TODO
	    :
            #ip -4 addr flush dev ${interface} label ${interface}:0
            #ip -4 addr add ${alias_ip_address}${alias_mask} \
            #    dev ${interface} label ${interface}:0
            #ip -4 route add ${alias_ip_address} dev ${interface} >/dev/null 2>&1
        fi

        # update /etc/resolv.conf
        make_resolv_conf

        ;;

    EXPIRE|FAIL|RELEASE|STOP)
        if [ -n "$alias_ip_address" ]; then
            # flush alias IP
            # TODO
            :
            #ip -4 addr flush dev ${interface} label ${interface}:0
        fi

        if [ -n "$old_ip_address" ]; then
            # flush leased IP
            inetutils-ifconfig -i ${interface} -A 0.0.0.0
        fi

        if [ -n "$alias_ip_address" ]; then
            # alias IP given => set it & add host route to it
            # TODO
            :
            #ip -4 addr add ${alias_ip_address}${alias_network_arg} \
            #    dev ${interface} label ${interface}:0
            #ip -4 route add ${alias_ip_address} dev ${interface} >/dev/null 2>&1
        fi

        ;;

    TIMEOUT)
        if [ -n "$alias_ip_address" ]; then
            # flush alias IP
            # TODO
            :
            #ip -4 addr flush dev ${interface} label ${interface}:0
        fi

        # set IP from recorded lease
        inetutils-ifconfig -i ${interface} -A ${new_ip_address} \
	    ${new_subnet_arg} ${new_broadcast_arg}

        if [ -n "$new_interface_mtu" ]; then
            # set MTU
            inetutils-ifconfig -i ${interface} --mtu ${new_interface_mtu}
        fi

        # if there is no router recorded in the lease or the 1st router answers pings
        if [ -z "$new_routers" ] || ping -q -c 1 "${new_routers%% *}"; then
            if [ -n "$alias_ip_address" ] &&
               [ "$new_ip_address" != "$alias_ip_address" ]; then
                # separate alias IP given => set up the alias IP & add host route to it
		# TODO
                :
                #ip -4 addr add ${alias_ip_address}${alias_mask} \
                #    dev ${interface} label ${interface}:0
                #ip -4 route add ${alias_ip_address} dev ${interface} >/dev/null 2>&1
            fi

            # set default route
            for router in $new_routers; do
                fsysopts /servers/socket/2 $(fsysopts /servers/socket/2) -g ${router}
            done

            # update /etc/resolv.conf
            make_resolv_conf
        else
            # flush all IPs from interface
            inetutils-ifconfig -i ${interface} -A 0.0.0.0
            exit_with_hooks 2 "$@"
        fi

        ;;
esac

exit_with_hooks 0
